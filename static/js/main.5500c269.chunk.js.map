{"version":3,"sources":["Components/AnimationsDropdown.jsx","Components/SymbolsDropdown.jsx","Components/Modal.jsx","ExamplePage.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["AnimationsDropdown","props","useState","animations","selectedAnimation","setSelectedAnimation","useEffect","DropdownButton","variant","title","id","onSelect","eventKey","length","map","animation","Dropdown","Item","key","href","SymbolsDropdown","symbols","selectedSymbol","setSelectedSymbol","console","log","selectedPattern","setSelectedPattern","symbol","config","bucketName","region","accessKeyId","secretAccessKey","mappingOfLinkNames","ModalToMakeSelection","isInitialMount","useRef","file","setFile","Id","uuidv4","AnimationLink","AudioLink","PatternLink","link","setLink","constructUploadLinkParameters","current","uploadLink","axios","post","then","res","catch","error","Modal","size","aria-labelledby","centered","Header","closeButton","Title","Body","Row","Col","md","type","onChange","event","target","files","Footer","Button","onClick","S3FileUpload","uploadFile","data","location","err","onHide","ExamplePage","React","modalShow","setModalShow","Card","Img","Text","show","App","className","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.5500c269.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\n\r\nfunction AnimationsDropdown(props) {\r\n    const [animations, setAnimations] = useState([\"Music Notes\"])\r\n    const [selectedAnimation, setSelectedAnimation] = useState(null)\r\n\r\n    useEffect(\r\n        ()=>{\r\n            setSelectedAnimation(props.selectedAnimation)\r\n        }, [props.selectedAnimation]\r\n    )\r\n    return (\r\n        <>\r\n        <DropdownButton\r\n            variant=\"secondary\"\r\n            title={!selectedAnimation ? \"Animations\" : selectedAnimation }\r\n            id=\"input-group-dropdown-1\"\r\n            onSelect = {(eventKey) => props.setSelectedAnimation(eventKey)}\r\n        >\r\n            {animations && animations.length > 0 && animations.map((animation) => \r\n                <Dropdown.Item key={animation} eventKey={animation} href=\"#\">{animation}</Dropdown.Item>\r\n            )}\r\n        </DropdownButton>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AnimationsDropdown;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\n\r\nfunction SymbolsDropdown(props) {\r\n    const [symbols, setSymbols] = useState([\"Dove\", \"Galatasaray Logo\"])\r\n    const [selectedSymbol, setSelectedSymbol] = useState(null)\r\n\r\n    useEffect(\r\n        ()=>{\r\n            console.log(props.selectedPattern)\r\n            setSelectedSymbol(props.selectedPattern)\r\n        }, [props.selectedPattern]\r\n    )\r\n\r\n    return (\r\n        <>\r\n        <DropdownButton\r\n            variant=\"secondary\"\r\n            title={!selectedSymbol ? \"Symbols\" : selectedSymbol }\r\n            id=\"input-group-dropdown-1\"\r\n            onSelect = {(eventKey) => props.setSelectedPattern(eventKey)}\r\n        >\r\n            {symbols && symbols.length > 0 && symbols.map((symbol) => \r\n                <Dropdown.Item key={symbol} eventKey={symbol} href=\"#\">{symbol}</Dropdown.Item>\r\n            )}\r\n        </DropdownButton>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SymbolsDropdown;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Modal, Button, Row, Col } from 'react-bootstrap';\r\nimport S3FileUpload from 'react-s3';\r\nimport AnimationsDropdown from './AnimationsDropdown';\r\nimport SymbolsDropdown from './SymbolsDropdown';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport axios from 'axios';\r\n\r\nconst config = {\r\n  bucketName: 'gift-audio-files',\r\n  region: 'us-east-2',\r\n  accessKeyId: 'AKIAY27Y3WERGR5EWHG7',\r\n  secretAccessKey: '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',\r\n}\r\n\r\nconst mappingOfLinkNames = \r\n{\r\n  \"Dove\" : \"https://gift-audio-files.s3.us-east-2.amazonaws.com/pattern-dove-gray+(2).patt\",\r\n  \"Galatasaray Logo\": \"https://gift-audio-files.s3.us-east-2.amazonaws.com/galatasary-logo.patt\",\r\n  \"Music Notes\": \"https://gift-audio-files.s3.us-east-2.amazonaws.com/scene.gltf\"\r\n\r\n}\r\n\r\nfunction ModalToMakeSelection(props) {\r\n  const isInitialMount = useRef(true);\r\n  const [file, setFile] = useState({})\r\n  const [link, setLink] = useState({\r\n    Id: uuidv4(),\r\n    AnimationLink: null,\r\n    AudioLink: null,\r\n    PatternLink: null\r\n  })\r\n\r\n  useEffect(() => {\r\n    console.log(constructUploadLinkParameters(link) )\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n       isInitialMount.current = false;\r\n    } else {\r\n       uploadLink(link)\r\n    }\r\n  }, [link.AudioLink]);\r\n\r\n  const constructUploadLinkParameters = (link) => \r\n  {    console.log(link.PatternLink)\r\n    var parameters = {\r\n      Id :  link.Id,\r\n      AnimationLink :  mappingOfLinkNames[`${link.AnimationLink}`],\r\n      AudioLink :  link.AudioLink,\r\n      PatternLink :  mappingOfLinkNames[`${link.PatternLink}`]\r\n    }\r\n\r\n      return parameters\r\n  }\r\n\r\n  const uploadLink = (link) =>{ \r\n    axios.post(`https://2eyfd024bh.execute-api.us-east-2.amazonaws.com/Stage/patterns`,constructUploadLinkParameters(link) )\r\n      .then(res => {\r\n        console.log(`Uplaoded the links Successfully ${res}` )\r\n      }).catch(error => { console.log(error)})\r\n    }\r\n\r\n  const getSelectedAnimationName = (selectedAnimation) => {\r\n    setLink({ ...link, AnimationLink: selectedAnimation })\r\n\r\n  }\r\n\r\n  const getSelectedPatternName = (selectedPattern) => {\r\n    setLink({ ...link, PatternLink: selectedPattern })\r\n  }\r\n\r\n  const uploadFile = (file, config) => {\r\n    S3FileUpload\r\n      .uploadFile(file, config)\r\n      .then((data) => {\r\n        console.log(\"Audio successfully uploaded to the following location \" + data.location)\r\n        setLink({ ...link, AudioLink: data.location })\r\n      })\r\n      .catch(err => console.error(err))\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Personalization Panel\r\n          </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Row> <Col md={6}> <input type=\"file\" onChange={(event) => setFile(event.target.files[0])} ></input> </Col> <Col md={6}><SymbolsDropdown selectedPattern={link.PatternLink} setSelectedPattern={getSelectedPatternName} /></Col> </Row>\r\n        <Row>  <Col md={6}><AnimationsDropdown selectedAnimation={link.AnimationLink} setSelectedAnimation={getSelectedAnimationName} /></Col> </Row>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"primary\" onClick={(event) => uploadFile(file,config)}>Save</Button>\r\n        <Button onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ModalToMakeSelection;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {Card,Button} from 'react-bootstrap';\r\nimport ModalToMakeSelection from './Components/Modal.jsx';\r\n\r\nfunction ExamplePage() {\r\n\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n\r\n    return (\r\n        <>\r\n            <Card >\r\n                <Card.Img variant=\"top\" />\r\n                <Card.Body>\r\n                    <Card.Title>Your Precious</Card.Title>\r\n                    <Card.Text>\r\n                        Enhance your jewelry experience with augmented reality!\r\n           </Card.Text>\r\n                    <Button variant=\"primary\" onClick={() => setModalShow(true)}>\r\n                        Customize\r\n      </Button>\r\n                </Card.Body>\r\n            </Card>\r\n\r\n            <ModalToMakeSelection\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n\r\n            />\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default ExamplePage;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ExamplePage from './ExamplePage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ExamplePage> </ExamplePage>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}