{"version":3,"sources":["Components/AnimationsDropdown.jsx","Components/SymbolsDropdown.jsx","Components/Modal.jsx","Components/PhotoGallery.jsx","ExamplePage.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["AnimationsDropdown","props","useState","animations","selectedAnimation","setSelectedAnimation","useEffect","DropdownButton","variant","title","id","onSelect","eventKey","length","map","animation","Dropdown","Item","key","href","SymbolsDropdown","symbols","selectedSymbol","setSelectedSymbol","selectedPattern","setSelectedPattern","symbol","mappingOfLinkNames","mappingOfImageLinksNames","ModalToMakeSelection","isInitialMount","useRef","file","setFile","Id","uuidv4","AnimationLink","AudioLink","PatternLink","link","setLink","loading","setLoading","error","setError","saveButtonEnabled","setSaveButtonEnabled","invalidFileExtension","setInvalidFileExtension","getid","name","current","uploadLink","axios","post","constructUploadLinkParameters","then","res","getimagelink","console","log","catch","uploadFileToS3","preSignedUrl","method","url","data","headers","baseAudioUrl","config","split","Modal","size","aria-labelledby","centered","Header","closeButton","Title","Alert","Body","Row","Col","md","type","onChange","event","target","files","slice","toString","toLowerCase","fileUploaderOnChange","Image","src","thumbnail","color","height","width","Footer","Button","onClick","get","fileUploadURL","getPresignedUrl","onHide","disabled","PhotoGallery","photos","ExamplePage","React","modalShow","setModalShow","photoGalleryModalShow","setPhotoGalleryModalShow","setId","imageLink","setImageLink","Card","Img","Text","show","value","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.49c9e405.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\n\r\nfunction AnimationsDropdown(props) {\r\n    const [animations, setAnimations] = useState([\"Music Notes\", \"Robin Bird\"])\r\n    const [selectedAnimation, setSelectedAnimation] = useState(null)\r\n\r\n    useEffect(\r\n        ()=>{\r\n            setSelectedAnimation(props.selectedAnimation)\r\n        }, [props.selectedAnimation]\r\n    )\r\n    return (\r\n        <>\r\n        <DropdownButton\r\n            variant=\"secondary\"\r\n            title={!selectedAnimation ? \"Animations\" : selectedAnimation }\r\n            id=\"input-group-dropdown-1\"\r\n            onSelect = {(eventKey) => props.setSelectedAnimation(eventKey)}\r\n        >\r\n            {animations && animations.length > 0 && animations.map((animation) => \r\n                <Dropdown.Item key={animation} eventKey={animation} href=\"#\">{animation}</Dropdown.Item>\r\n            )}\r\n        </DropdownButton>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AnimationsDropdown;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\n\r\nfunction SymbolsDropdown(props) {\r\n    const [symbols, setSymbols] = useState([\"Dove\", \"Galatasaray Logo\"])\r\n    const [selectedSymbol, setSelectedSymbol] = useState(null)\r\n\r\n    useEffect(\r\n        ()=>{\r\n            setSelectedSymbol(props.selectedPattern)\r\n        }, [props.selectedPattern]\r\n    )\r\n\r\n    return (\r\n        <>\r\n        <DropdownButton\r\n            variant=\"secondary\"\r\n            title={!selectedSymbol ? \"Symbols\" : selectedSymbol }\r\n            id=\"input-group-dropdown-1\"\r\n            onSelect = {(eventKey) => props.setSelectedPattern(eventKey)}\r\n        >\r\n            {symbols && symbols.length > 0 && symbols.map((symbol) => \r\n                <Dropdown.Item key={symbol} eventKey={symbol} href=\"#\">{symbol}</Dropdown.Item>\r\n            )}\r\n        </DropdownButton>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SymbolsDropdown;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Modal, Button, Row, Col, Image, Alert } from 'react-bootstrap';\r\nimport S3FileUpload from 'react-s3';\r\nimport AnimationsDropdown from './AnimationsDropdown';\r\nimport SymbolsDropdown from './SymbolsDropdown';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport axios from 'axios';\r\nimport ReactLoading from 'react-loading';\r\n\r\nconst mappingOfLinkNames =\r\n{\r\n  \"Dove\": \"https://gift-audio-files.s3.us-east-2.amazonaws.com/pattern-dove-gray+(2).patt\",\r\n  \"Galatasaray Logo\": \"https://gift-audio-files.s3.us-east-2.amazonaws.com/galatasary-logo.patt\",\r\n  \"Music Notes\": \"https://gift-audio-files.s3.us-east-2.amazonaws.com/scene.gltf\",\r\n  \"Robin Bird\":\"https://gift-audio-files.s3.us-east-2.amazonaws.com/robinBird.gltf\",\r\n\r\n}\r\n\r\nconst mappingOfImageLinksNames =\r\n{\r\n  \"Dove\": \"https://gift-audio-files.s3.us-east-2.amazonaws.com/MarkerImages/pattern-dove-gray+(2).png\",\r\n  \"Galatasaray Logo\": \"https://gift-audio-files.s3.us-east-2.amazonaws.com/MarkerImages/pattern-galatasaray-logo-vector.png\",\r\n}\r\n\r\nfunction ModalToMakeSelection(props) {\r\n  const isInitialMount = useRef(true);\r\n  const [file, setFile] = useState({})\r\n  const [link, setLink] = useState({\r\n    Id: uuidv4(),\r\n    AnimationLink: null,\r\n    AudioLink: null,\r\n    PatternLink: null\r\n  })\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  const [saveButtonEnabled, setSaveButtonEnabled] = useState(false)\r\n  const [invalidFileExtension, setInvalidFileExtension] = useState(false)\r\n\r\n  useEffect(() => {\r\n    props.getid(link.Id)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n \r\n    if(file && file.name && link.AnimationLink && link.PatternLink)  \r\n    {setSaveButtonEnabled(true)}\r\n    else\r\n    {\r\n      setSaveButtonEnabled(false)\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n    } else {\r\n      uploadLink(link)\r\n    }\r\n  }, [link.AudioLink]);\r\n\r\n  const constructUploadLinkParameters = (link) => {\r\n    var parameters = {\r\n      Id: link.Id,\r\n      AnimationLink: mappingOfLinkNames[`${link.AnimationLink}`],\r\n      AudioLink: link.AudioLink,\r\n      PatternLink: mappingOfLinkNames[`${link.PatternLink}`]\r\n    }\r\n\r\n    return parameters\r\n  }\r\n\r\n  const uploadLink = (link) => {\r\n    setLoading(true)\r\n    axios.post(`https://2eyfd024bh.execute-api.us-east-2.amazonaws.com/Stage/patterns`, constructUploadLinkParameters(link))\r\n      .then(res => {\r\n        setLoading(false)\r\n        props.getimagelink(mappingOfImageLinksNames[`${link.PatternLink}`])\r\n        console.log(`Uplaoded the links Successfully ${res}`)\r\n      }).catch(error => {\r\n        console.log(error)\r\n        setError(error)\r\n        setLoading(false)\r\n      })\r\n  }\r\n\r\n  const getSelectedAnimationName = (selectedAnimation) => {\r\n    setLink({ ...link, AnimationLink: selectedAnimation })\r\n\r\n  }\r\n\r\n  const getSelectedPatternName = (selectedPattern) => {\r\n    setLink({ ...link, PatternLink: selectedPattern })\r\n  }\r\n\r\n  const getPresignedUrl = (file) => {\r\n    setLoading(true)                                                       \r\n    axios.get(`https://2eyfd024bh.execute-api.us-east-2.amazonaws.com/Stage/preSignedUrl?fileName=${file.name}`)\r\n    .then(data => {\r\n      setLoading(false)\r\n      uploadFileToS3(data.data.fileUploadURL,file)\r\n    }).catch(error => {\r\n      console.log(error)\r\n      setError(error)\r\n      setLoading(false)\r\n    })\r\n  };\r\n\r\n  const uploadFileToS3 = (preSignedUrl, file) => {\r\n    setLoading(true)\r\n\r\n    axios({\r\n      method: \"PUT\",\r\n      url: preSignedUrl,\r\n      data: file,\r\n      headers: { \"Content-Type\": \"multipart/form-data\" }\r\n  })\r\n      .then(res => {\r\n        var baseAudioUrl = res.config.url.split(/[?#]/)[0] \r\n        setLink({ ...link, AudioLink: baseAudioUrl })\r\n        setLoading(false)  \r\n        console.log(res)\r\n      }).catch(error => {\r\n        console.log(error)\r\n        setError(error)\r\n        setLoading(false)\r\n      })\r\n  };\r\n  \r\n\r\n  // convert this to a promise - on successs proceed to close, or stay \r\n  const saveOnClick = (event) => {\r\n   // uploadFile(file, config)\r\n    getPresignedUrl(file) // get presigned url, then upload\r\n    props.onHide()\r\n\r\n  }\r\n\r\n  // this validation should be taken care of on the backend\r\n  const fileUploaderOnChange = (event) => {\r\n    let file = event.target.files[0]\r\n    if(file && file.name.slice(-4).toString().toLowerCase() == \".mp3\" && file.size < 5000000)\r\n    {\r\n      setInvalidFileExtension(false)\r\n    setFile(event.target.files[0])\r\n    }\r\n    else \r\n    {\r\n      setInvalidFileExtension(true)\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Personalization Panel\r\n          </Modal.Title>\r\n          {saveButtonEnabled ?\r\n          <div></div> :\r\n          <Alert key={1} variant={'warning'}>\r\n          Please upload an audio file, pick your symbol, and pick your animation.\r\n         </Alert> }\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Row> <Col md={6}> <input type=\"file\" onChange={(event) => fileUploaderOnChange(event)} ></input> </Col> <Col md={6}><SymbolsDropdown selectedPattern={link.PatternLink} setSelectedPattern={getSelectedPatternName} /></Col> </Row>\r\n        <Row>  <Col md={6}><AnimationsDropdown selectedAnimation={link.AnimationLink} setSelectedAnimation={getSelectedAnimationName} /></Col> <Col md={6}><Image src={mappingOfImageLinksNames[`${link.PatternLink}`]} thumbnail /></Col> </Row>\r\n        <Row>  <Col md={5}></Col> <Col md={6}>  {loading && !error && <ReactLoading type={\"spinningBubbles\"} color={\"#868e96\"} height={100} width={100} />} </Col> </Row>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n     { invalidFileExtension && <Alert key={2} variant={'danger'}>\r\n          Audio file should be in .mp3 format, and less than 5 MB!\r\n          </Alert> }\r\n          { error && !loading && <Alert key={2} variant={'danger'}>\r\n          Error occured while saving your choices. Please try again. \r\n          </Alert> }\r\n        <Button variant=\"primary\" onClick={saveOnClick} disabled={!saveButtonEnabled}>Save</Button>\r\n        <Button onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ModalToMakeSelection;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport Gallery from 'react-photo-gallery';\r\n\r\n\r\nfunction PhotoGallery(props) {\r\n\r\n    const photos = [\r\n        {\r\n          src: 'https://precious-ar-engraving-photos.s3.us-east-2.amazonaws.com/IMG-0406.jpg',\r\n          width: 4,\r\n          height: 3\r\n        },\r\n        {\r\n            src: 'https://precious-ar-engraving-photos.s3.us-east-2.amazonaws.com/dove-key-chain-engraving-anime.jpg',\r\n            width: 3,\r\n            height: 4\r\n          },\r\n\r\n      ];\r\n\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Samples\r\n          </Modal.Title>\r\n\r\n     \r\n      </Modal.Header>\r\n      <Modal.Body>\r\n      <Gallery photos={photos} />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n \r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default PhotoGallery;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Card, Button, Image, Col, Alert, Row } from 'react-bootstrap';\r\nimport ModalToMakeSelection from './Components/Modal.jsx';\r\nimport PhotoGallery from './Components/PhotoGallery.jsx';\r\nimport QRCode from 'qrcode.react';\r\n\r\n\r\nfunction ExamplePage() {\r\n\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    const [photoGalleryModalShow, setPhotoGalleryModalShow] = React.useState(false);\r\n    const [id, setId] = React.useState(\"0ddbed79-a1be-4400-b690-99da7c9d4515\")\r\n    const [imageLink, setImageLink] = React.useState(null)\r\n\r\n    const getTheId = (id) => {\r\n        setId(id)\r\n    }\r\n\r\n    const getTheImageLink = (imageLink) => {\r\n        setImageLink(imageLink)\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Card >\r\n                <Card.Img variant=\"top\" />\r\n                <Card.Body>\r\n                    <Card.Title>Your Precious</Card.Title>\r\n                    <Card.Text>\r\n                        Enhance your jewelry experience with augmented reality!\r\n           </Card.Text>\r\n                    <Button variant=\"primary\" onClick={() => setModalShow(true)}>\r\n                        Customize\r\n                  </Button>\r\n                  &nbsp;&nbsp;&nbsp;\r\n                  <Button variant=\"primary\" onClick={() => setPhotoGalleryModalShow(true)}>\r\n                        Photo Gallery\r\n                  </Button>\r\n                </Card.Body>\r\n            </Card>\r\n            <Row>\r\n            <Col md={4}>\r\n                <Alert key={1} variant={'info'}>\r\n              <p>  Please follow the instructions below! </p>    \r\n              <p>   1 - To pick your choices, press the customize button on the top.</p> \r\n              <p>   2 - Pick a symbol, and animation you'd like from the drop-down menu. (We don't have many choices currently, coming very soon...)</p> \r\n              <p>   3 - Upload a .mp3 format audio not more than 5MB (Real-time voice recording to upload is coming soon..) </p> \r\n              <p>   4- Once you are ready, click save, if no error 🤞, you are ready to scan the QR code </p> \r\n              <p>   5- Once you scan the code, it will take you to our camera web application </p> \r\n              <p>   6- Allow camera access, enable sound, and scan the symbol you have just picked with the your precious web app. </p> \r\n              <p>   7- You should be hearing the beutiful sound you have uploaded, and seeing the AR animation you have chosen!! </p> \r\n              <p>   Have fun !!! 🤗  </p> \r\n                \r\n                    \r\n                    </Alert>\r\n            </Col>\r\n            <ModalToMakeSelection\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n                getid={getTheId}\r\n                getimagelink={getTheImageLink}\r\n\r\n            /> \r\n            <PhotoGallery\r\n                show={photoGalleryModalShow}\r\n                onHide={() => setPhotoGalleryModalShow(false)}\r\n\r\n            /> \r\n        <span>\r\n            <QRCode value={`https://kelestemur.github.io/The-Preciuos-Sound/#/${id}`} />\r\n\r\n            <Image src={imageLink} thumbnail />\r\n            </span>\r\n            </Row>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default ExamplePage;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ExamplePage from './ExamplePage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ExamplePage> </ExamplePage>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}